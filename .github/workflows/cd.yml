name: CD

on:
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: prod-deployment
  cancel-in-progress: false

env:
  DOCKER_IMAGE: interview-webapp
  DEPLOYMENT_TIMEOUT: 300

jobs:
  build-and-push:
    name: Build and push docker image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix=,format=long
            type=raw,value=latest
            type=raw,value=${{ github.run_number }}

      - name: Build and export image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image-${{ github.sha }}.tar

      - name: Upload docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: /tmp/image-${{ github.sha }}.tar
          retention-days: 1

  deploy-and-verify:
    name: Deploy and verify prod
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production
      url: http://localhost:3000
    
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/image-${{ github.sha }}.tar

      - name: Stop existing container
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q '^prod-webapp$'; then
            echo "Stopping existing container..."
            docker stop prod-webapp || true
            docker rm prod-webapp || true
          fi
        continue-on-error: true

      - name: Deploy new container
        id: deploy
        run: |
          echo "Deploying new version..."
          docker run -d \
            --name prod-webapp \
            --network host \
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          
          echo "deployment-time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          echo "Container started"
          sleep 5

      - name: Verify container is running
        run: |
          if ! docker ps | grep -q prod-webapp; then
            echo "Container is not running!"
            docker ps -a
            docker logs prod-webapp
            exit 1
          fi
          echo "Container is running"

      - name: Health check verification
        id: health-check
        run: |
          max_attempts=5
          attempt=0
          PORT=3001
          
          echo "Verifying deployment health..."
          
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts..."
            
            # health endpoint
            status=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/health 2>/dev/null || echo "000")
            
            if [ "$status" = "200" ]; then
              echo "Health check passed!"
              response=$(curl -s http://localhost:$PORT/ 2>/dev/null)
              if [ "$response" = "Hello World" ]; then
                echo "Application responding correctly"
                echo "success=true" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "Unexpected response: $response"
              fi
            else
              echo "Health check returned status: $status"
              if [ $attempt -eq 5 ] || [ $attempt -eq 15 ]; then
                echo "Recent container logs:"
                docker logs prod-webapp --tail 20 || true
              fi
            fi
            sleep 2
          done
          
          echo "Health check failed after $max_attempts attempts"
          docker logs prod-webapp --tail 50 || true
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Deployment verification summary
        if: always()
        run: |
          if [ "${{ steps.health-check.outputs.success }}" = "true" ]; then
            echo "DEPLOYMENT SUCCESSFUL"
            echo "Version: ${{ github.sha }}"
            echo "Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            echo "Health Status: HEALTHY"
          else
            echo "DEPLOYMENT VERIFICATION FAILED"
            echo "Health Status: FAILED"
          fi

  notify:
    name: Send Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-and-verify]
    if: always()
    
    steps:
      - name: Deployment success notification
        if: needs.deploy-and-verify.result == 'success'
        run: |
          echo "DEPLOYMENT SUCCESS"
          echo "Environment: Production"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Deployment failure notification
        if: needs.deploy-and-verify.result == 'failure'
        run: |
          echo "DEPLOYMENT FAILURE"
          echo "Environment: Production"
          echo "Commit: ${{ github.sha }}"
          echo "Attempted by: ${{ github.actor }}"
          echo "Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          exit 1

  rollback:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [deploy-and-verify]
    if: failure() && needs.deploy-and-verify.result == 'success'
    
    steps:
      - name: Trigger rollback
        run: |
          echo "INIT AUTOMATIC ROLLBACK"
          echo "Deployment verification failed."
          echo "Restore previous image in production."
          echo "Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
